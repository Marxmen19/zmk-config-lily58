/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        ctrl_f1 {
            bindings = <&kp LC(F1)>;
            key-positions = <52 24>;
        };

        close_win {
            bindings = <&kp LA(F4)>;
            key-positions = <50 4>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESCAPE  &kp N1  &kp N2  &kp N3        &kp N4        &kp N5                         &kp N6        &kp N7               &kp N8         &kp N9   &kp N0    &kp BACKSPACE
&kp TAB     &kp Q   &kp W   &kp E         &kp R         &kp T                          &kp Y         &kp U                &kp I          &kp O    &kp P     &kp MINUS
&kp CLCK    &kp A   &kp S   &kp D         &kp F         &kp G                          &kp H         &kp J                &kp K          &kp L    &kp SEMI  &kp SQT
&kp LSHFT   &kp Z   &kp X   &kp C         &kp V         &kp B   &kp LBKT     &kp RBKT  &kp N         &kp M                &kp COMMA      &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                            &kp LEFT_ALT  &kp LEFT_WIN  &to 1   &kp SPACE    &kp RET   &lt 2 DELETE  &mt RCTRL BACKSPACE  &kp RIGHT_ALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            bindings = <
&kp F1  &kp F2  &kp F3              &kp F4          &kp F5         &kp F6                                     &kp F7           &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &kp HOME            &kp UP_ARROW    &kp END        &kp INSERT                                 &kp PAGE_UP      &trans  &trans  &trans   &trans   &trans
&trans  &trans  &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT      &kp ENTER                                  &kp PAGE_DOWN    &trans  &trans  &trans   &trans   &trans
&trans  &trans  &kp LC(LEFT_ARROW)  &trans          &kp RC(RIGHT)  &kp DEL     &kp LC(PAUSE_BREAK)    &trans  &kp PRINTSCREEN  &trans  &trans  &trans   &trans   &trans
                                    &trans          &trans         &trans      &trans                 &trans  &trans           &trans  &trans
            >;
        };

        higher_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };
    };
};
